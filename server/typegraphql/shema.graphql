# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account implements IAccount {
  accountAvaliable: Boolean!
  accountId: ID!
  accountName: String!
  accountPwd: String!
  accountType: AccountType!
  lastUpdateDate: Timestamp!
  registryDate: Timestamp!
  relatedRecord: Record
}

"""
Login Input Type
"""
input AccountLoginInput {
  accountName: String!
  accountPwd: String!
  loginType: AccountType!
}

"""
Register Input Type
"""
input AccountRegistryInput {
  accountName: String!
  accountPwd: String!
  loginType: AccountType
}

"""
Primitive Response Status Indicator
"""
type AccountStatus implements IBaseStatus {
  data: [Account!]
  message: String!
  success: Boolean!
}

"""
Account Type Enum
"""
enum AccountType {
  ADMIN
  COMMON
  DOMINATOR
  ENTERPRISE
  GOV
  ORG
  VISITOR
}

union AccountUnionResult = AccountStatus | LoginOrRegisterStatus

"""
Recipe >>> Cook >>> WorkExperience >> Company
"""
type Company {
  description: String!
  name: String!
  registerDate: Timestamp!
  scale: CompanyScale
}

"""
Company Scale
"""
enum CompanyScale {
  Huge
  Middle
  Small
}

"""
Recipe >>> Cook
"""
type Cook {
  experience: WorkExperience!
  name: String!
  yearsOfExperience: Int!
}

"""
All possible preparation difficulty levels
"""
enum Difficulty {
  Beginner
  Easy
  Hard
  MasterChef
  Medium
}

"""
Executor Skill & Task Difficulty Level Enum
"""
enum DifficultyLevel {
  BEGINNER
  LEGEND
  MASTER
  NOVICE
  OLD_DOMINATOR
  ROOKIE
  SKILLED
}

type Executor implements IExecutor {
  age: Float!
  desc: String!

  """
  获取对象类型的执行者描述
  """
  ExecutorDescField: ExecutorDesc!
  isFool: Boolean!
  job: Job!
  joinDate: Timestamp!
  lastUpdateDate: Timestamp!
  name: String!
  region: Region!
  relatedRecord: Record
  spAgeField(param: Float): Int!
  tasks: [Task!]
  uid: ID!
}

"""
Executor Create Input
"""
input ExecutorCreateInput {
  age: Int
  isFool: Boolean
  job: Job
  name: String!
  region: Region
}

type ExecutorDesc implements IExecutorDesc {
  level: DifficultyLevel!
  satisfaction: Int
  successRate: Int
}

"""
Update Executor Desc Input
"""
input ExecutorDescUpdateInput {
  level: DifficultyLevel
  satisfaction: Int
  successRate: Int
}

"""
Executor Response Status Indicator
"""
type ExecutorStatus implements IBaseStatus {
  data: [Executor!]
  message: String!
  success: Boolean!
}

"""
Executor Update Input
"""
input ExecutorUpdateInput {
  age: Int
  isFool: Boolean
  job: Job
  name: String
  region: Region
  uid: String!
}

"""
Account Interface Type
"""
interface IAccount {
  accountAvaliable: Boolean!
  accountId: ID!
  accountName: String!
  accountPwd: String!
  accountType: AccountType!
  lastUpdateDate: Timestamp!
  registryDate: Timestamp!
  relatedRecord: Record
}

"""
Basic Status Wrapper
"""
interface IBaseStatus {
  message: String!
  success: Boolean!
}

"""
Update Executor Basic Info Input
"""
interface IExecutor {
  age: Float!
  desc: String
  isFool: Boolean!
  job: Job!
  joinDate: Timestamp!
  lastUpdateDate: Timestamp!
  name: String!
  region: Region!
  relatedRecord: Record
  spAgeField: Int
  tasks: [Task!]
  uid: ID!
}

"""
Executor Interface Type
"""
interface IExecutorDesc {
  level: DifficultyLevel!
  satisfaction: Int
  successRate: Int
}

"""
Record Interface Type
"""
interface IRecord {
  createDate: Timestamp!
  lastUpdateDate: Timestamp!
  recordAccount: Account
  recordExecutor: Executor
  recordId: ID!
  recordSubstance: Substance
  recordTask: Task
}

"""
Substance Interface Type
"""
interface ISubstance {
  asylumed: Boolean!
  lastActiveDate: Timestamp!
  relatedRecord: Record
  relatedTask: Task
  substanceAlive: Boolean!
  substanceAppearDate: Timestamp!
  substanceDesc: String!
  substanceId: ID!
  substanceIssues: String!
  substanceLevel: DifficultyLevel!
  substanceName: String!
}

"""
Task Interface Type
"""
interface ITask {
  allowAbort: Boolean!
  assignee: Executor
  lastUpdateDate: Timestamp!
  publishDate: Timestamp!
  relatedRecord: Record
  requireCleaner: Boolean!
  requirePsychologicalIntervention: Boolean!
  taskAccmplished: Boolean!
  taskAvaliable: Boolean!
  taskContent: String!
  taskId: ID!
  taskLevel: DifficultyLevel!
  taskRate: Float!
  taskReward: Float!
  taskSource: TaskSource!
  taskSubstance: Substance
  taskTarget: TaskTarget!
  taskTitle: String!
}

"""
Executor Job Enum
"""
enum Job {
  BE
  FE
}

union LevelQueryResult = Executor | Task

"""
Login / Register Status Indicator
"""
type LoginOrRegisterStatus implements IBaseStatus {
  expiredDate: Int
  message: String!
  success: Boolean!
  token: String
}

type Mutation {
  """
  用户永久注销
  """
  AccountDestory(
    accountName: String!
    accountPwd: String!
  ): LoginOrRegisterStatus!

  """
  提升或下降用户权限等级
  """
  AccountLevelMutate(
    accountId: String!
    level: AccountType!
  ): AccountUnionResult!

  """
  新用户注册
  """
  AccountRegistry(account: AccountRegistryInput!): LoginOrRegisterStatus!

  """
  指派任务
  """
  AssignTask(taskId: String!, uid: String!): TaskStatus!

  """
  添加执行者
  """
  CreateExecutor(newExecutorInfo: ExecutorCreateInput!): ExecutorStatus!

  """
  创建任务同时关联到实体
  """
  CreateNewTask(taskCreateParam: TaskCreateInput!): TaskStatus!

  """
  新增实体，同时新增任务
  """
  CreateSubstanceAndTask: SubstanceStatus!

  """
  仅新增实体
  """
  CreateSubstanceOnly: SubstanceStatus!

  """
  删除执行者
  """
  DeleteExecutor(uid: String!): ExecutorStatus!

  """
  删除任务
  """
  DeleteTask(taskId: String!): TaskStatus!

  """
  冻结任务 无法恢复
  """
  FreezeTask(taskId: String!): TaskStatus!

  """
  修改密码
  """
  ModifyPassword(
    accountName: String!
    newPassword: String!
    prevPassword: String!
  ): LoginOrRegisterStatus!

  """
  变更实体基本信息
  """
  MutateSubstanceInfo: SubstanceStatus!

  """
  变更实体威胁级别
  """
  MutateSubstanceLevel: SubstanceStatus!

  """
  变更任务级别
  """
  MutateTaskLevel(level: DifficultyLevel!, taskId: String!): TaskStatus!
  publisherMutation(message: String): Boolean!
  pubSubMutation(message: String): Boolean!
  pubSubMutationToDynamicTopic(message: String, topic: String!): Boolean!

  """
  变更实体存活状态
  """
  ToggleSubstanceAlive: SubstanceStatus!

  """
  变更实体收容状态
  """
  ToggleSubstanceAsylume: SubstanceStatus!

  """
  变更任务状态
  """
  ToggleTaskStatus(taskId: String!): TaskStatus!

  """
  更新执行者基本信息
  """
  UpdateExecutorBasicInfo(
    modifiedExecutorInfo: ExecutorUpdateInput!
  ): ExecutorStatus!

  """
  更新执行者描述
  """
  UpdateExecutorDesc(
    uid: String!
    userDesc: ExecutorDescUpdateInput!
  ): ExecutorStatus!

  """
  变更任务基本信息
  """
  UpdateTaskInfo(taskUpdateParam: TaskUpdateInput!): TaskStatus!
}

type Notification {
  date: Timestamp!
  id: ID!
  message: String
}

"""
Pagination Options Input
"""
input PaginationOptions {
  cursor: Int
  offset: Int
}

type Query {
  """
  账号登录
  """
  AccountLogin(account: AccountLoginInput!): LoginOrRegisterStatus!

  """
  检验token是否合法
  """
  CheckIsTokenValid(token: String!): LoginOrRegisterStatus!

  """
  容器注册时间
  """
  ContainerRegisterTime: Timestamp!
  currentDate: Timestamp!

  """
  查询所有用户
  """
  QueryAllAccounts: AccountStatus!

  """
  获取所有执行者
  """
  QueryAllExecutors(pagination: PaginationOptions): ExecutorStatus!
  QueryAllRecords(relations: RecordRelationsInput): RecordStatus!

  """
  查找所有实体信息
  """
  QueryAllSubstances(
    joinTask: Boolean
    pagination: PaginationOptions
  ): SubstanceStatus!

  """
  获取所有任务
  """
  QueryAllTasks(
    pagination: PaginationOptions
    relations: TaskRelationsInput
  ): TaskStatus!

  """
  基于级别获取所有执行者与任务
  """
  QueryByDifficultyLevel(
    difficulty: DifficultyLevel
    pagination: PaginationOptions
  ): [LevelQueryResult!]!

  """
  根据基本条件查找执行者
  """
  QueryExecutorByConditions(
    age: Int
    isFool: Boolean
    job: String
    level: DifficultyLevel!
    name: String
    region: Float
    satisfaction: Int
    successRate: Int
  ): ExecutorStatus!

  """
  根据描述（等级、成功率、评分）查找执行者
  """
  QueryExecutorByDesc(
    level: DifficultyLevel
    pagination: PaginationOptions
    satisfaction: Int
    successRate: Int
  ): ExecutorStatus!

  """
  查找特定执行者
  """
  QueryExecutorById(uid: String!): ExecutorStatus!

  """
  查询执行者当前被分配的任务
  """
  QueryExecutorTasks(relations: TaskRelationsInput, uid: String!): TaskStatus!

  """
  基于难度查找菜谱
  """
  QueryRecipesByDifficulty(difficulty: Difficulty): [Recipe!]!

  """
  基于作料查找菜谱
  """
  QueryRecipesByIngredients(ingredients: [String!]): [Recipe!]!

  """
  返回所有菜谱 厨师 和 咸鱼!
  """
  QueryRecipeUnions: [RecipeUnionResult!]!

  """
  根据恩格尔系数查找咸鱼
  """
  QuerySaltFishByCoefficient(coefficient: Int!): [SaltFish!]!

  """
  基于条件查找实体
  """
  QuerySubstanceByConditions: SubstanceStatus!

  """
  基于ID查找实体
  """
  QuerySubstanceById(joinTask: Boolean): SubstanceStatus!

  """
  基于威胁级别查找实体
  """
  QuerySubstanceByLevel: SubstanceStatus!

  """
  基于ID获取任务
  """
  QueryTaskByID(relations: TaskRelationsInput, taskId: String!): TaskStatus!
}

"""
Recipe Type
"""
type Recipe {
  cook: Cook
  description: String
  ingredients: [String!]
  preparationDifficulty: Difficulty
  title: String!
}

union RecipeUnionResult = Cook | Recipe | SaltFish

type Record implements IRecord {
  createDate: Timestamp!
  lastUpdateDate: Timestamp!
  recordAccount: Account
  recordExecutor: Executor
  recordId: ID!
  recordSubstance: Substance
  recordTask: Task
}

"""
Record Relations Input
"""
input RecordRelationsInput {
  joinAccount: Boolean = false
  joinExecutor: Boolean = false
  joinSubstance: Boolean = false
  joinTask: Boolean = false
}

"""
Record Response Status Indicator
"""
type RecordStatus implements IBaseStatus {
  data: [Record!]
  message: String!
  success: Boolean!
}

"""
Executor Region Enum
"""
enum Region {
  ABANDONED
  CENTRAL
  NORTH
  OTHER
  PACIFIC_OCEAN
  SOUTH
}

"""
useless object type in union type, just for funny:)
"""
type SaltFish {
  EngelCoefficient: Int!
}

type Subscription {
  normalSubscription: Notification!
  subscriptionWithFilter: Notification!
  subscriptionWithFilterToDynamicTopic(topic: String!): Notification!
}

type Substance implements ISubstance {
  asylumed: Boolean!
  lastActiveDate: Timestamp!
  relatedRecord: Record
  relatedTask: Task
  substanceAlive: Boolean!
  substanceAppearDate: Timestamp!
  substanceDesc: String!
  substanceId: ID!
  substanceIssues: String!
  substanceLevel: DifficultyLevel!
  substanceName: String!
}

"""
Substance Response Status Indicator
"""
type SubstanceStatus implements IBaseStatus {
  data: [Substance!]
  message: String!
  success: Boolean!
}

type Task implements ITask {
  allowAbort: Boolean!
  assignee: Executor
  lastUpdateDate: Timestamp!
  publishDate: Timestamp!
  relatedRecord: Record
  requireCleaner: Boolean!
  requirePsychologicalIntervention: Boolean!
  taskAccmplished: Boolean!
  taskAvaliable: Boolean!
  taskContent: String!
  taskId: ID!
  taskLevel: DifficultyLevel!
  taskRate: Float!
  taskReward: Float!
  taskSource: TaskSource!
  taskSubstance: Substance
  taskTarget: TaskTarget!
  taskTitle: String!
}

"""
Task Create Input
"""
input TaskCreateInput {
  substanceId: String!
  taskContent: String
  taskLevel: Float
  taskReward: Float
  taskSource: Float
  taskTarget: Float
  taskTitle: String!
}

"""
Task Relations Input
"""
input TaskRelationsInput {
  joinAssignee: Boolean = false
  joinRecord: Boolean = false
  joinSubstance: Boolean = false
}

"""
Task Source
"""
enum TaskSource {
  GOV
  MERCHANT
  OTHER
  PERSONAL
  SCP
}

"""
Task Response Status Indicator
"""
type TaskStatus implements IBaseStatus {
  data: [Task!]
  message: String!
  success: Boolean!
}

"""
Task Against
"""
enum TaskTarget {
  AI
  ALIEN
  CTHULHU
  HUMAN
  OTHER
  SCP_ITEM
  WITCHER
}

"""
Task Update Input
"""
input TaskUpdateInput {
  taskContent: String
  taskId: String!
  taskLevel: Float
  taskRate: Float
  taskReward: Float
  taskSource: Float
  taskTarget: Float
  taskTitle: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
Recipe >>> Cook >>> WorkExperience
"""
type WorkExperience {
  company: Company!
  isFired: Boolean!
  workYears: Float!
}
